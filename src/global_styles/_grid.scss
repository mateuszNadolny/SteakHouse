// creating a simple css grid library that will be reusable across all react components
// this file will generate grid classes that will help with making the page responsible

// HOW IT WORKS:
// default number of columns in row is equal to 12
// using mixin's from _breakpoints.scss i am creating a classes for each of the screen sizes
// for each screen size there are classes that are defined as: col-{$i}-{screen_size}
// $i means how much from the 12 columns space the element should occupy
// screen-size states on what type of screen size should the element take the grid columns

$grid-columns: 12;

$grid-gaps: (
  "0": 0,
  "1": 10px,
  "2": 20px,
  "3": 30px,
);

$layout-values: flex-start, flex-end, center, space-between, space-around;

// base layout classes

.row {
    display: flex;
    flex-flow: row wrap;
}

// grid gaps
@each $key, $val in $grid-gaps {
    .gap-#{$key} > * {
      padding: $val;
    }
    .gap-#{$key} {
      margin-left: -$val;
      margin-right: -$val;
    }
  }
  
  // justify content classes
@each $val in $layout-values {
    .justify-#{$val} {
      justify-content: $val;
    }
}

@include mobile {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-mobile {
            box-sizing: border-box;
            flex-grow: 0;
            width: $i * 100% / $grid-columns;
        }
    }
}

@include tablet {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-tablet {
            box-sizing: border-box;
            flex-grow: 0;
            width: $i * 100% / $grid-columns;
        }
    }
}

@include laptop {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-laptop {
            box-sizing: border-box;
            flex-grow: 0;
            width: $i * 100% / $grid-columns;
        }
    }
}

@include desktop {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-desktop {
            box-sizing: border-box;
            flex-grow: 0;
            width: $i * 100% / $grid-columns;
        }
    }
}
